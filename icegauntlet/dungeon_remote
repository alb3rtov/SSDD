#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# pylint: disable=W1203

'''
    ICE Gauntlet LOCAL GAME
'''
import json
import sys
import atexit
import logging
import argparse
import Ice
Ice.loadSlice('icegauntlet.ice')
import IceGauntlet
import game
import game.common
import game.screens
import game.pyxeltools
import game.orchestration


EXIT_OK = 0
BAD_COMMAND_LINE = 1

DEFAULT_ROOM = 'tutorial.json'
DEFAULT_HERO = game.common.HEROES[0]

class RemoteDungeonMap(Ice.Application):
   
    def __init__(self, game_proxy):
        self.game_server = game_proxy
        self.game_proxy = None

    def main(self):
       
        proxy = self.communicator().stringToProxy(self.game_server)
        self.game_proxy = IceGauntlet.DungeonPrx.checkedCast(proxy)

        if not self.game_proxy:
            raise RunTimeError('Invalid proxy')

        #self.next_room(gauntlet)
        return 0

    @property
    def next_room(self):
        
        #bucle condicion finished
        roomData = self.game_proxy.getRoom()

        return roomData
    
    @property
    def finished(self):
        return self
        

@atexit.register
# pylint: disable=W0613
def bye(*args, **kwargs):
    '''Exit callback, use for shoutdown'''
    print('Thanks for playing!')
# pylint: enable=W0613

def parse_commandline():
    '''Parse and check commandline'''
    parser = argparse.ArgumentParser('IceDungeon Local Game')
    parser.add_argument('--proxy', help='Proxy game')
    parser.add_argument(
        '-p', '--player', default=DEFAULT_HERO, choices=game.common.HEROES,
        dest='hero', help='Hero to play with'
    )
    options = parser.parse_args()

    return options

class Client(Ice.Application):

    def run(self, argv):
        '''Start game according to commandline'''
        user_options = parse_commandline()
        if not user_options:
            return BAD_COMMAND_LINE

        dungeon = RemoteDungeonMap(user_options.proxy)
        dungeon.main()
        gauntlet = game.Game(user_options.hero, dungeon) 
        game.pyxeltools.initialize()
        gauntlet.add_state(game.screens.TileScreen, game.common.INITIAL_SCREEN)
        gauntlet.add_state(game.screens.StatsScreen, game.common.STATUS_SCREEN)
        gauntlet.add_state(game.screens.GameScreen, game.common.GAME_SCREEN)
        gauntlet.add_state(game.screens.GameOverScreen, game.common.GAME_OVER_SCREEN)
        gauntlet.add_state(game.screens.GoodEndScreen, game.common.GOOD_END_SCREEN)
        gauntlet.start()

        return EXIT_OK

sys.exit(Client().main(sys.argv))
