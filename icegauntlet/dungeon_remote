#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# pylint: disable=W1203

'''
    ICE Gauntlet LOCAL GAME
'''
import time
import json
import sys
import atexit
import logging
import argparse
import Ice
Ice.loadSlice('icegauntlet.ice')
import IceGauntlet
import game
import game.common
import game.screens
import game.pyxeltools
import game.orchestration


EXIT_OK = 0
BAD_COMMAND_LINE = 1

DEFAULT_ROOM = 'tutorial.json'
DEFAULT_HERO = game.common.HEROES[0]

class RemoteDungeonMap(Ice.Application):
    
    def next_room(self, game_server):
        
        #bucle condicion finished
        roomData = game_server.getRoom()
        print(roomData)
        #roomJson = json.loads(roomData)
        #print(roomJson)
        
        #print(roomJson)
        return roomData

    def main(self, game_proxy):
       
        proxy = self.communicator().stringToProxy(game_proxy)
        gauntlet = IceGauntlet.DungeonPrx.checkedCast(proxy)

        if not gauntlet:
            raise RunTimeError('Invalid proxy')

        self.next_room(gauntlet)
    
        
        return 0

@atexit.register
# pylint: disable=W0613
def bye(*args, **kwargs):
    '''Exit callback, use for shoutdown'''
    print('Thanks for playing!')
# pylint: enable=W0613

def parse_commandline():
    '''Parse and check commandline'''
    parser = argparse.ArgumentParser('IceDungeon Local Game')
    #parser.add_argument('LEVEL', nargs='+', default=[DEFAULT_ROOM], help='List of levels')
    parser.add_argument('--proxy', help='Proxy game')
    parser.add_argument(
        '-p', '--player', default=DEFAULT_HERO, choices=game.common.HEROES,
        dest='hero', help='Hero to play with'
    )
    options = parser.parse_args()

    #for level_file in options.LEVEL:
    #    if not game.assets.search(level_file):
    #        logging.error(f'Level "{level_file}" not found!')
    #        return None
    return options

class Client(Ice.Application):

    def run(self, argv):
        '''Start game according to commandline'''
        user_options = parse_commandline()
        if not user_options:
            return BAD_COMMAND_LINE

        #game.pyxeltools.initialize() 
    
        #dungeon = game.DungeonMap(user_options.LEVEL)
        #print(user_options.proxy)
        #dungeon = RemoteDungeonMap(user_options.proxy)
        print("va a entrar")
        dungeon = RemoteDungeonMap()
        prueba = dungeon.main(user_options.proxy)
        #dungeonn.run(user_options.proxy)    
        #dungeon.main(user_options.proxy)
        
        gauntlet = game.Game(user_options.hero, dungeon) 
        
        
        game.pyxeltools.initialize()

        gauntlet.add_state(game.screens.TileScreen, game.common.INITIAL_SCREEN)
        gauntlet.add_state(game.screens.StatsScreen, game.common.STATUS_SCREEN)
        gauntlet.add_state(game.screens.GameScreen, game.common.GAME_SCREEN)
        gauntlet.add_state(game.screens.GameOverScreen, game.common.GAME_OVER_SCREEN)
        gauntlet.add_state(game.screens.GoodEndScreen, game.common.GOOD_END_SCREEN)
        gauntlet.start()

        return EXIT_OK

sys.exit(Client().main(sys.argv))

#if __name__ == '__main__':
#    sys.exit(main())
